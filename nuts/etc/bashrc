# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm|xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

# SHELL_TYPE='local'
# SHELL_TYPE='remote'
SHELL_TYPE='virtual'

ESC=$(printf "\e")
FG_BLACK="\[$ESC[30m\]"
FG_RED="\[$ESC[31m\]"
FG_GREEN="\[$ESC[32m\]"
FG_YELLOW="\[$ESC[33m\]"
FG_BLUE="\[$ESC[34m\]"
FG_PURPLE="\[$ESC[35m\]"
FG_CYAN="\[$ESC[36m\]"
FG_WHITE="\[$ESC[37m\]"
BOLD="\[$ESC[1m\]"
DIM="\[$ESC[2m\]"
RESET="\[$ESC(B$ESC[m\]"

PS1="(${FG_RED}${BOLD}container${RESET}) "  # username
PS1+="${FG_RED}\u"  # username
PS1+="${FG_YELLOW}${BOLD}@\h${RESET}"  # host
PS1+="${FG_WHITE}${DIM}:[${RESET}"  # opening bracket
PS1+="${FG_BLUE}\w"  # directory
PS1+="${FG_WHITE}${DIM}]${RESET}"  # closing bracket
# PS1+="${FG_RED}\$(parse_git_branch)"  # git branch
PS1+="${FG_WHITE}:${RESET} "  # closing colon

# unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias dir='ls -lF'
alias ll='ls -alF'
alias cd..='cd ..'

cat /root/welcome.txt
